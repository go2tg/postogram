package main

import (
	"fmt"
	"testing"
)

func TestCRLF(t *testing.T) {
	message := []byte{0x54, 0x56, 0x0d, 0x0a, 0x33, 0x88}
	_, mes, err := CRLF(message)
	if err != nil {
		t.Errorf("error ")
	} else {
		fmt.Println(string(mes))
	}
}

func BenchmarkCRLF(b *testing.B) {
	message := []byte{0x54, 0x54, 0x54, 0x54, 0x05, 0x05,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x0d, 0x0a}
	for i := 0; i < b.N; i++ {
		t, _, err := CRLF(message)
		if err != nil {
			b.Errorf("error array")
		} else {
			if t == false {
				b.Errorf("error search result")
			}
		}
	}
}

func TestCRLFPointCRLF(t *testing.T) {
	message := []byte{0x54, 0x56, 0x54, 0x56, 0x54, 0x56, 0x0d, 0x0a, 0x2e, 0x0d, 0x0a, 0x33, 0x88}
	_, mes, err := CRLFPointCRLF(message)
	if err != nil {
		t.Errorf("error ")
	} else {
		fmt.Println(string(mes))
	}
}

func BenchmarkCRLFPointCRLF(b *testing.B) {
	message := []byte{0x54, 0x54, 0x54, 0x54, 0x05, 0x05,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54, 0x54, 0x56, 0x54,
		0x0d, 0x0a, 0x2e, 0x0d, 0x0a}
	for i := 0; i < b.N; i++ {
		t, _, err := CRLFPointCRLF(message)
		if err != nil {
			b.Errorf("error array")
		} else {
			if t == false {
				b.Errorf("error search result")
			} else {
				//fmt.Println(mes)
			}
		}
	}
}

func TestGenUUIDv4(t *testing.T) {
	s := GenUUIDv4()
	if len(s) == 36 {
		fmt.Println(s)
	} else {
		t.Errorf("Error UUID generation")
	}
}

func BenchmarkGenUUIDv4(b *testing.B) {

	for i := 0; i < b.N; i++ {
		GenUUIDv4()
	}
}
